security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        chain_provider:
            chain:
                providers: [in_memory, my_ldap]

        in_memory:
            memory:
                users:
                    admin: # admin/admin
                        password: $2y$12$LLZrVYGQgfSE3ldV68Y19egI7Th8JI318Mcae9VnVNAQtxeuKA8fi
                        roles: 'ROLE_ADMIN'
                    api: # api/api
                        # password: $2y$12$9tSW4RKsti0ScgK2kkLBzeyZ.XCN2oXXSq5sL6WpTsmq5544MXhBO # api/api
                        password: '%env(resolve:API_PASSWORD_WORKORDER)%'
                        roles: 'ROLE_API'
                    apip: # api/public
                        password: '%env(resolve:APIP_PASSWORD_WORKORDER)%'
                        roles: 'ROLE_APIP'


        my_ldap:
            ldap:
                service: Symfony\Component\Ldap\Ldap
                base_dn: '%env(resolve:LDAP_SEARCH_BASEDN)%'
                search_dn: '%env(resolve:LDAP_SEARCH_USER)%'
                search_password: '%env(resolve:LDAP_SEARCH_PASSWORD)%'
                default_roles: ROLE_USER
                #uid_key: cn
                uid_key: sAMAccountName

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            provider: chain_provider

            http_basic: true

            form_login_ldap:
                login_path: login
                check_path: login
                service: Symfony\Component\Ldap\Ldap
                dn_string: '%env(resolve:LDAP_LOGIN_STRING)%'
            logout: true

            anonymous: true 

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    encoders:
        Symfony\Component\Security\Core\User\User:
           algorithm: bcrypt
           cost: 12

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: [ ROLE_ADMIN, ROLE_USER ] }
        - { path: ^/api/public, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: [ ROLE_ADMIN, ROLE_API, ROLE_USER ] }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, roles: [ ROLE_ADMIN, ROLE_API, ROLE_USER ] }
